[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "MetaData",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.models.baseclass",
        "description": "app.models.baseclass",
        "isExtraImport": true,
        "detail": "app.models.baseclass",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.models.baseclass",
        "description": "app.models.baseclass",
        "isExtraImport": true,
        "detail": "app.models.baseclass",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.models.baseclass",
        "description": "app.models.baseclass",
        "isExtraImport": true,
        "detail": "app.models.baseclass",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.models.baseclass",
        "description": "app.models.baseclass",
        "isExtraImport": true,
        "detail": "app.models.baseclass",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.orm.database",
        "description": "app.orm.database",
        "isExtraImport": true,
        "detail": "app.orm.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "app.orm.database",
        "description": "app.orm.database",
        "isExtraImport": true,
        "detail": "app.orm.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "app.orm.database",
        "description": "app.orm.database",
        "isExtraImport": true,
        "detail": "app.orm.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "app.orm.database",
        "description": "app.orm.database",
        "isExtraImport": true,
        "detail": "app.orm.database",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.orm.database",
        "description": "app.orm.database",
        "isExtraImport": true,
        "detail": "app.orm.database",
        "documentation": {}
    },
    {
        "label": "Game",
        "importPath": "app.models.models",
        "description": "app.models.models",
        "isExtraImport": true,
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "Store",
        "importPath": "app.models.models",
        "description": "app.models.models",
        "isExtraImport": true,
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.models",
        "description": "app.models.models",
        "isExtraImport": true,
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "Platform",
        "importPath": "app.models.models",
        "description": "app.models.models",
        "isExtraImport": true,
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.models",
        "description": "app.models.models",
        "isExtraImport": true,
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "Game",
        "importPath": "app.models.models",
        "description": "app.models.models",
        "isExtraImport": true,
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "Store",
        "importPath": "app.models.models",
        "description": "app.models.models",
        "isExtraImport": true,
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "Platform",
        "importPath": "app.models.models",
        "description": "app.models.models",
        "isExtraImport": true,
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "Game",
        "importPath": "app.models.models",
        "description": "app.models.models",
        "isExtraImport": true,
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "Store",
        "importPath": "app.models.models",
        "description": "app.models.models",
        "isExtraImport": true,
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "Platform",
        "importPath": "app.models.models",
        "description": "app.models.models",
        "isExtraImport": true,
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "Game",
        "importPath": "app.models.models",
        "description": "app.models.models",
        "isExtraImport": true,
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "Store",
        "importPath": "app.models.models",
        "description": "app.models.models",
        "isExtraImport": true,
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "Platform",
        "importPath": "app.models.models",
        "description": "app.models.models",
        "isExtraImport": true,
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.models",
        "description": "app.models.models",
        "isExtraImport": true,
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.models",
        "description": "app.models.models",
        "isExtraImport": true,
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.models",
        "description": "app.models.models",
        "isExtraImport": true,
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "as_declarative",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "get_db",
        "importPath": "app.database",
        "description": "app.database",
        "isExtraImport": true,
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "app.database",
        "description": "app.database",
        "isExtraImport": true,
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.database",
        "description": "app.database",
        "isExtraImport": true,
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "app.database",
        "description": "app.database",
        "isExtraImport": true,
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "importPath": "app.service.security",
        "description": "app.service.security",
        "isExtraImport": true,
        "detail": "app.service.security",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "app.service.security",
        "description": "app.service.security",
        "isExtraImport": true,
        "detail": "app.service.security",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "importPath": "app.schemas.user",
        "description": "app.schemas.user",
        "isExtraImport": true,
        "detail": "app.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "app.schemas.user",
        "description": "app.schemas.user",
        "isExtraImport": true,
        "detail": "app.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "app.schemas.user",
        "description": "app.schemas.user",
        "isExtraImport": true,
        "detail": "app.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "importPath": "app.schemas.user",
        "description": "app.schemas.user",
        "isExtraImport": true,
        "detail": "app.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "importPath": "app.schemas.user",
        "description": "app.schemas.user",
        "isExtraImport": true,
        "detail": "app.schemas.user",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "declared_attr",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "app.models.user",
        "description": "app.models.user",
        "isExtraImport": true,
        "detail": "app.models.user",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "importPath": "app.service.hashing",
        "description": "app.service.hashing",
        "isExtraImport": true,
        "detail": "app.service.hashing",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "importPath": "app.service.hashing",
        "description": "app.service.hashing",
        "isExtraImport": true,
        "detail": "app.service.hashing",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "importPath": "app.service.hashing",
        "description": "app.service.hashing",
        "isExtraImport": true,
        "detail": "app.service.hashing",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "importPath": "app.service.hashing",
        "description": "app.service.hashing",
        "isExtraImport": true,
        "detail": "app.service.hashing",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "TimeoutException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "TimeoutException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "TimeoutException",
        "importPath": "selenium.common.exceptions",
        "description": "selenium.common.exceptions",
        "isExtraImport": true,
        "detail": "selenium.common.exceptions",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "TechnodomParser",
        "importPath": "app.parsers.technodom_parser",
        "description": "app.parsers.technodom_parser",
        "isExtraImport": true,
        "detail": "app.parsers.technodom_parser",
        "documentation": {}
    },
    {
        "label": "DNSScraper",
        "importPath": "app.parsers.dns_parser",
        "description": "app.parsers.dns_parser",
        "isExtraImport": true,
        "detail": "app.parsers.dns_parser",
        "documentation": {}
    },
    {
        "label": "MarwinParser",
        "importPath": "app.parsers.marwin_parser",
        "description": "app.parsers.marwin_parser",
        "isExtraImport": true,
        "detail": "app.parsers.marwin_parser",
        "documentation": {}
    },
    {
        "label": "create_user",
        "importPath": "app.service.auth",
        "description": "app.service.auth",
        "isExtraImport": true,
        "detail": "app.service.auth",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "create_user",
        "importPath": "app.service.user",
        "description": "app.service.user",
        "isExtraImport": true,
        "detail": "app.service.user",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "app.api.auth",
        "description": "app.api.auth",
        "isExtraImport": true,
        "detail": "app.api.auth",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "importPath": "app.service.jwt",
        "description": "app.service.jwt",
        "isExtraImport": true,
        "detail": "app.service.jwt",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.29b68a469eb5_initial",
        "description": "alembic.versions.29b68a469eb5_initial",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('platforms',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),\n    sa.Column('name', sa.String(), nullable=False),\n    sa.PrimaryKeyConstraint('id'),\n    sa.UniqueConstraint('name')\n    )\n    op.create_table('stores',\n    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),",
        "detail": "alembic.versions.29b68a469eb5_initial",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.29b68a469eb5_initial",
        "description": "alembic.versions.29b68a469eb5_initial",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_games_title'), table_name='games')\n    op.drop_index(op.f('ix_games_platform_id'), table_name='games')\n    op.drop_table('games')\n    op.drop_index(op.f('ix_users_id'), table_name='users')\n    op.drop_index(op.f('ix_users_email'), table_name='users')\n    op.drop_table('users')\n    op.drop_table('stores')\n    op.drop_table('platforms')",
        "detail": "alembic.versions.29b68a469eb5_initial",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\nfrom alembic import context\n# this is the Alembic Config object, which provides\n# access to the values within the .ini file in use.\nconfig = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "config = context.config\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel\n# target_metadata = mymodel.Base.metadata\ntarget_metadata = Base.metadata",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app.api.auth",
        "description": "app.api.auth",
        "peekOfCode": "def login(user_data: UserLogin, db: Session = Depends(get_db)):\n    user = db.query(User).filter(User.email == user_data.email).first()\n    print(\"hjoiadfhj.kGhujzghulxfdi\", user)\n    if not user or not verify_password(user_data.password, user.hashed_password):\n        raise HTTPException(status_code=401, detail=\"Invalid credentials\")\n    access_token = create_access_token(\n        data={\"sub\": user.email},\n        expires_delta=timedelta(minutes=30)\n    )\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}",
        "detail": "app.api.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.api.auth",
        "description": "app.api.auth",
        "peekOfCode": "router = APIRouter()\n@router.post(\"/login\")\ndef login(user_data: UserLogin, db: Session = Depends(get_db)):\n    user = db.query(User).filter(User.email == user_data.email).first()\n    print(\"hjoiadfhj.kGhujzghulxfdi\", user)\n    if not user or not verify_password(user_data.password, user.hashed_password):\n        raise HTTPException(status_code=401, detail=\"Invalid credentials\")\n    access_token = create_access_token(\n        data={\"sub\": user.email},\n        expires_delta=timedelta(minutes=30)",
        "detail": "app.api.auth",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "app.models.baseclass",
        "description": "app.models.baseclass",
        "peekOfCode": "class Base:\n    id: Any\n    __name__: str\n    metadata = metadata\n    @declared_attr\n    def __tablename__(self) -> str:\n        return self.__name__.lower()",
        "detail": "app.models.baseclass",
        "documentation": {}
    },
    {
        "label": "metadata",
        "kind": 5,
        "importPath": "app.models.baseclass",
        "description": "app.models.baseclass",
        "peekOfCode": "metadata = MetaData()\n@as_declarative()\nclass Base:\n    id: Any\n    __name__: str\n    metadata = metadata\n    @declared_attr\n    def __tablename__(self) -> str:\n        return self.__name__.lower()",
        "detail": "app.models.baseclass",
        "documentation": {}
    },
    {
        "label": "Platform",
        "kind": 6,
        "importPath": "app.models.models",
        "description": "app.models.models",
        "peekOfCode": "class Platform(Base):\n    __tablename__ = \"platforms\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)\n    name: Mapped[str] = mapped_column(String, unique=True, nullable=False)\n    games = relationship(\"Game\", back_populates=\"platform\")\nclass Game(Base):\n    __tablename__ = \"games\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)\n    title: Mapped[str] = mapped_column(String, index=True, nullable=False)\n    platform_id: Mapped[int] = mapped_column(ForeignKey(\"platforms.id\"), index=True, nullable=False)",
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "Game",
        "kind": 6,
        "importPath": "app.models.models",
        "description": "app.models.models",
        "peekOfCode": "class Game(Base):\n    __tablename__ = \"games\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)\n    title: Mapped[str] = mapped_column(String, index=True, nullable=False)\n    platform_id: Mapped[int] = mapped_column(ForeignKey(\"platforms.id\"), index=True, nullable=False)\n    price: Mapped[int] = mapped_column(Integer, nullable=True)\n    availability: Mapped[bool] = mapped_column(Boolean, default=True)\n    store_id: Mapped[int] = mapped_column(ForeignKey(\"stores.id\"))\n    platform = relationship(\"Platform\", back_populates=\"games\")  # <-- ДОБАВЛЕНО\n    store = relationship(\"Store\", back_populates=\"games\")",
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "Store",
        "kind": 6,
        "importPath": "app.models.models",
        "description": "app.models.models",
        "peekOfCode": "class Store(Base):\n    __tablename__ = \"stores\"\n    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)\n    name: Mapped[str] = mapped_column(String, unique=True, nullable=False)\n    games = relationship(\"Game\", back_populates=\"store\")\nclass User(Base):\n    __tablename__ = \"users\"\n    id = mapped_column(Integer, primary_key=True, index=True)\n    email = mapped_column(String, unique=True, index=True, nullable=False)\n    hashed_password = mapped_column(String, nullable=False)",
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.models.models",
        "description": "app.models.models",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"users\"\n    id = mapped_column(Integer, primary_key=True, index=True)\n    email = mapped_column(String, unique=True, index=True, nullable=False)\n    hashed_password = mapped_column(String, nullable=False)\n    is_active = mapped_column(Boolean, default=True)",
        "detail": "app.models.models",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.orm.database",
        "description": "app.orm.database",
        "peekOfCode": "def get_db():\n    \"\"\"Создаёт сессию для взаимодействия с БД и закрывает её после работы\"\"\"\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n# def init_db():\n#     \"\"\"Создание таблиц в базе данных\"\"\"\n#     from app.models import game, store, user, platforms  # Импортируем модели, чтобы SQLAlchemy их увидел",
        "detail": "app.orm.database",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "app.orm.database",
        "description": "app.orm.database",
        "peekOfCode": "DATABASE_URL = f\"postgresql://{os.getenv('DB_USER')}:{os.getenv('DB_PASSWORD')}@{os.getenv('DB_HOST')}:{os.getenv('DB_PORT')}/{os.getenv('DB_NAME')}\"\n# Создаём движок SQLAlchemy\nengine = create_engine(DATABASE_URL, echo=True)  # echo=True для отладки\n# Создаём фабрику сессий\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\ndef get_db():\n    \"\"\"Создаёт сессию для взаимодействия с БД и закрывает её после работы\"\"\"\n    db = SessionLocal()\n    try:\n        yield db",
        "detail": "app.orm.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.orm.database",
        "description": "app.orm.database",
        "peekOfCode": "engine = create_engine(DATABASE_URL, echo=True)  # echo=True для отладки\n# Создаём фабрику сессий\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\ndef get_db():\n    \"\"\"Создаёт сессию для взаимодействия с БД и закрывает её после работы\"\"\"\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.orm.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "app.orm.database",
        "description": "app.orm.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\ndef get_db():\n    \"\"\"Создаёт сессию для взаимодействия с БД и закрывает её после работы\"\"\"\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n# def init_db():\n#     \"\"\"Создание таблиц в базе данных\"\"\"",
        "detail": "app.orm.database",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "app.orm.user",
        "description": "app.orm.user",
        "peekOfCode": "def create_user(db: Session, email: str, password: str):\n    hashed_password = hash_password(password)\n    user = User(email=email, hashed_password=hashed_password, is_active=True)\n    db.add(user)\n    db.commit()\n    db.refresh(user)\n    return user\ndef get_user_by_email(db: Session, email: str):\n    return db.query(User).filter(User.email == email).first()",
        "detail": "app.orm.user",
        "documentation": {}
    },
    {
        "label": "get_user_by_email",
        "kind": 2,
        "importPath": "app.orm.user",
        "description": "app.orm.user",
        "peekOfCode": "def get_user_by_email(db: Session, email: str):\n    return db.query(User).filter(User.email == email).first()",
        "detail": "app.orm.user",
        "documentation": {}
    },
    {
        "label": "DNSScraper",
        "kind": 6,
        "importPath": "app.parsers.dns_parser",
        "description": "app.parsers.dns_parser",
        "peekOfCode": "class DNSScraper:\n    \"\"\"Парсер игр с сайта DNS, сохраняющий данные в PostgreSQL.\"\"\"\n    BASE_URLS = {\n        \"PlayStation\": \"https://www.dns-shop.kz/catalog/17a897ed16404e77/igry-dlya-playstation/?order=6&p={page}\",\n        \"Xbox\": \"https://www.dns-shop.kz/catalog/17a9f99116404e77/igry-dlya-microsoft-xbox/?order=6&p={page}\",\n        \"Nintendo\": \"https://www.dns-shop.kz/catalog/17a8b09516404e77/igry-dlya-nintendo/?order=6&p={page}\"\n    }\n    def __init__(self, driver=None):\n        self.driver = driver if driver else webdriver.Chrome()\n        self.driver.maximize_window()",
        "detail": "app.parsers.dns_parser",
        "documentation": {}
    },
    {
        "label": "MarwinParser",
        "kind": 6,
        "importPath": "app.parsers.marwin_parser",
        "description": "app.parsers.marwin_parser",
        "peekOfCode": "class MarwinParser:\n    \"\"\"Класс для парсинга списка игр с сайта Marwin и сохранения данных в БД.\"\"\"\n    BASE_URLS = {\n        \"Playstation\": \"https://www.marwin.kz/videogames/playstation/igry-dliya-playstation-5/\",\n        \"Playstation\": \"https://www.marwin.kz/videogames/playstation/igry-dliya-playstation-4/\",\n        \"Xbox One\": \"https://www.marwin.kz/videogames/xbox/igry-dlya-microsoft-xbox-one/\",\n        \"Nintendo Switch\": \"https://www.marwin.kz/videogames/nintendo/igry-dlya-nintendo-switch/\"\n    }\n    def __init__(self):\n        self.driver = webdriver.Chrome()",
        "detail": "app.parsers.marwin_parser",
        "documentation": {}
    },
    {
        "label": "TechnodomParser",
        "kind": 6,
        "importPath": "app.parsers.technodom_parser",
        "description": "app.parsers.technodom_parser",
        "peekOfCode": "class TechnodomParser:\n    \"\"\"Парсер игр с сайта Technodom, сохраняющий данные в PostgreSQL.\"\"\"\n    BASE_URLS = {\n        \"PlayStation\": \"https://www.technodom.kz/karaganda/catalog/vsjo-dlja-gejmerov/igry-dlja-pristavok/igry-playstation-4\",\n        \"PlayStation\": \"https://www.technodom.kz/karaganda/catalog/vsjo-dlja-gejmerov/igry-dlja-pristavok/igry-playstation-5\",\n        \"Xbox\": \"https://www.technodom.kz/karaganda/catalog/vsjo-dlja-gejmerov/igry-dlja-pristavok/igry-xbox\",\n        \"Nintendo\": \"https://www.technodom.kz/karaganda/catalog/vsjo-dlja-gejmerov/igry-dlja-pristavok/igry-nintendo\"\n    }\n    def __init__(self, driver=None):\n        self.driver = driver if driver else webdriver.Chrome()",
        "detail": "app.parsers.technodom_parser",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "app.schemas.user",
        "description": "app.schemas.user",
        "peekOfCode": "class UserCreate(BaseModel):\n    email: str\n    password: str\nclass UserResponse(BaseModel):\n    id: int\n    email: str\n    username: str\n    class Config:\n        orm_mode = True\nclass Token(BaseModel):",
        "detail": "app.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserResponse",
        "kind": 6,
        "importPath": "app.schemas.user",
        "description": "app.schemas.user",
        "peekOfCode": "class UserResponse(BaseModel):\n    id: int\n    email: str\n    username: str\n    class Config:\n        orm_mode = True\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\nclass UserLogin(BaseModel):",
        "detail": "app.schemas.user",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "app.schemas.user",
        "description": "app.schemas.user",
        "peekOfCode": "class Token(BaseModel):\n    access_token: str\n    token_type: str\nclass UserLogin(BaseModel):\n    email: str\n    password: str\nclass UserCreate(BaseModel):\n    email: str\n    password: str",
        "detail": "app.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "kind": 6,
        "importPath": "app.schemas.user",
        "description": "app.schemas.user",
        "peekOfCode": "class UserLogin(BaseModel):\n    email: str\n    password: str\nclass UserCreate(BaseModel):\n    email: str\n    password: str",
        "detail": "app.schemas.user",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "app.schemas.user",
        "description": "app.schemas.user",
        "peekOfCode": "class UserCreate(BaseModel):\n    email: str\n    password: str",
        "detail": "app.schemas.user",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "app.service.auth",
        "description": "app.service.auth",
        "peekOfCode": "def create_user(db: Session, user: UserCreate):\n    hashed_password = hash_password(user.password)\n    db_user = User(email=user.email, hashed_password=hashed_password)\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user",
        "detail": "app.service.auth",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.service.database",
        "description": "app.service.database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.service.database",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "app.service.database",
        "description": "app.service.database",
        "peekOfCode": "DATABASE_URL = \"postgresql://postgres:admin@localhost:5432/dalek2\"\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\nfrom sqlalchemy.orm import Session\nfrom app.database import SessionLocal\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db",
        "detail": "app.service.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.service.database",
        "description": "app.service.database",
        "peekOfCode": "engine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\nfrom sqlalchemy.orm import Session\nfrom app.database import SessionLocal\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:",
        "detail": "app.service.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "app.service.database",
        "description": "app.service.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\nfrom sqlalchemy.orm import Session\nfrom app.database import SessionLocal\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.service.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.service.database",
        "description": "app.service.database",
        "peekOfCode": "Base = declarative_base()\nfrom sqlalchemy.orm import Session\nfrom app.database import SessionLocal\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.service.database",
        "documentation": {}
    },
    {
        "label": "hash_password",
        "kind": 2,
        "importPath": "app.service.hashing",
        "description": "app.service.hashing",
        "peekOfCode": "def hash_password(password: str) -> str:\n    return pwd_context.hash(password)\ndef verify_password(plain_password: str, hashed_password: str) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.service.hashing",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "app.service.hashing",
        "description": "app.service.hashing",
        "peekOfCode": "def verify_password(plain_password: str, hashed_password: str) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.service.hashing",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "app.service.hashing",
        "description": "app.service.hashing",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\ndef hash_password(password: str) -> str:\n    return pwd_context.hash(password)\ndef verify_password(plain_password: str, hashed_password: str) -> bool:\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.service.hashing",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "app.service.jwt",
        "description": "app.service.jwt",
        "peekOfCode": "def create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)",
        "detail": "app.service.jwt",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "app.service.jwt",
        "description": "app.service.jwt",
        "peekOfCode": "SECRET_KEY = \"SECRET_KEY\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)",
        "detail": "app.service.jwt",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "app.service.jwt",
        "description": "app.service.jwt",
        "peekOfCode": "ALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)",
        "detail": "app.service.jwt",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "app.service.jwt",
        "description": "app.service.jwt",
        "peekOfCode": "ACCESS_TOKEN_EXPIRE_MINUTES = 30\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)",
        "detail": "app.service.jwt",
        "documentation": {}
    },
    {
        "label": "verify_password",
        "kind": 2,
        "importPath": "app.service.security",
        "description": "app.service.security",
        "peekOfCode": "def verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\ndef get_password_hash(password):\n    return pwd_context.hash(password)\ndef create_access_token(data: dict, expires_delta: timedelta = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)",
        "detail": "app.service.security",
        "documentation": {}
    },
    {
        "label": "get_password_hash",
        "kind": 2,
        "importPath": "app.service.security",
        "description": "app.service.security",
        "peekOfCode": "def get_password_hash(password):\n    return pwd_context.hash(password)\ndef create_access_token(data: dict, expires_delta: timedelta = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)",
        "detail": "app.service.security",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "app.service.security",
        "description": "app.service.security",
        "peekOfCode": "def create_access_token(data: dict, expires_delta: timedelta = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt",
        "detail": "app.service.security",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "app.service.security",
        "description": "app.service.security",
        "peekOfCode": "SECRET_KEY = \"secret_key\"  # Замените на ваш секретный ключ\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\ndef get_password_hash(password):\n    return pwd_context.hash(password)\ndef create_access_token(data: dict, expires_delta: timedelta = None):\n    to_encode = data.copy()",
        "detail": "app.service.security",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "app.service.security",
        "description": "app.service.security",
        "peekOfCode": "ALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\ndef get_password_hash(password):\n    return pwd_context.hash(password)\ndef create_access_token(data: dict, expires_delta: timedelta = None):\n    to_encode = data.copy()\n    if expires_delta:",
        "detail": "app.service.security",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "app.service.security",
        "description": "app.service.security",
        "peekOfCode": "ACCESS_TOKEN_EXPIRE_MINUTES = 30\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\ndef get_password_hash(password):\n    return pwd_context.hash(password)\ndef create_access_token(data: dict, expires_delta: timedelta = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta",
        "detail": "app.service.security",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "app.service.security",
        "description": "app.service.security",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\ndef verify_password(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)\ndef get_password_hash(password):\n    return pwd_context.hash(password)\ndef create_access_token(data: dict, expires_delta: timedelta = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:",
        "detail": "app.service.security",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "app.service.user",
        "description": "app.service.user",
        "peekOfCode": "def create_user(db: Session, user: UserCreate):\n    hashed_password = hash_password(user.password)\n    db_user = User(email=user.email, hashed_password=hashed_password, is_active=True)\n    db.add(db_user)\n    db.commit()\n    db.refresh(db_user)\n    return db_user\ndef get_user_by_email(db: Session, email: str):\n    return db.query(User).filter(User.email == email).first()",
        "detail": "app.service.user",
        "documentation": {}
    },
    {
        "label": "get_user_by_email",
        "kind": 2,
        "importPath": "app.service.user",
        "description": "app.service.user",
        "peekOfCode": "def get_user_by_email(db: Session, email: str):\n    return db.query(User).filter(User.email == email).first()",
        "detail": "app.service.user",
        "documentation": {}
    },
    {
        "label": "JWTTokenSettings",
        "kind": 6,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "class JWTTokenSettings:\n    \"\"\"Class containing main settings for JWT token creation.\"\"\"\n    JWT_SECRET_KEY: str = os.getenv(\"JWT_SECRET_KEY\", \"default_secret_key\")\n    JWT_ALGORITHM: str = os.getenv(\"JWT_ALGORITHM\", \"HS256\")\n    ACCESS_TOKEN_EXPIRE_MINUTES: int = int(os.getenv(\"ACCESS_TOKEN_EXPIRE_MINUTES\", 30))\nclass ParserSettings:\n    \"\"\"Class containing settings for web parsers.\"\"\"\n    SELENIUM_DRIVER_PATH: str = os.getenv(\"SELENIUM_DRIVER_PATH\", \"chromedriver\")\n    PARSER_TIMEOUT: int = int(os.getenv(\"PARSER_TIMEOUT\", 10))\n    PARSER_USER_AGENT: str = os.getenv(",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "ParserSettings",
        "kind": 6,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "class ParserSettings:\n    \"\"\"Class containing settings for web parsers.\"\"\"\n    SELENIUM_DRIVER_PATH: str = os.getenv(\"SELENIUM_DRIVER_PATH\", \"chromedriver\")\n    PARSER_TIMEOUT: int = int(os.getenv(\"PARSER_TIMEOUT\", 10))\n    PARSER_USER_AGENT: str = os.getenv(\n        \"PARSER_USER_AGENT\",\n        \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 \"\n        \"(KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36\",\n    )\nclass TestDBSettings:",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "TestDBSettings",
        "kind": 6,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "class TestDBSettings:\n    \"\"\"Class containing main settings for connecting to the test database.\"\"\"\n    DB_USER: str = \"postgres\"\n    DB_PASSWORD: str = os.getenv(\"DB_PASSWORD\", \"admin\")\n    DB_HOST: str = \"localhost\"\n    DB_PORT: str = \"5432\"\n    DB_NAME: str = \"db_test_api\"\n    DATABASE_URL: str = (\n        f\"postgresql+asyncpg://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}\"\n    )",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "ProdDBSettings",
        "kind": 6,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "class ProdDBSettings:\n    \"\"\"Class containing main settings for connecting to the production database.\"\"\"\n    DB_USER: str = os.getenv(\"DB_USER\")\n    DB_PASSWORD: str = os.getenv(\"DB_PASSWORD\")\n    DB_HOST: str = os.getenv(\"DB_HOST\")\n    DB_PORT: str = os.getenv(\"DB_PORT\")\n    DB_NAME: str = os.getenv(\"DB_NAME\")\n    DATABASE_URL: str = (\n        f\"postgresql+asyncpg://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}\"\n    )",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "project_settings",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "project_settings = {\n    \"title\": \"Tech Store Parser\",\n    \"version\": \"1.0\",\n    \"description\": \"FastAPI application with asyncpg and SQLAlchemy technologies\",\n}\nclass JWTTokenSettings:\n    \"\"\"Class containing main settings for JWT token creation.\"\"\"\n    JWT_SECRET_KEY: str = os.getenv(\"JWT_SECRET_KEY\", \"default_secret_key\")\n    JWT_ALGORITHM: str = os.getenv(\"JWT_ALGORITHM\", \"HS256\")\n    ACCESS_TOKEN_EXPIRE_MINUTES: int = int(os.getenv(\"ACCESS_TOKEN_EXPIRE_MINUTES\", 30))",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "DATABASE_URL = f\"postgresql://{os.getenv('DB_USER')}:{os.getenv('DB_PASSWORD')}@{os.getenv('DB_HOST')}:{os.getenv('DB_PORT')}/{os.getenv('DB_NAME')}\"\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "engine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "Base = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "parse_technodom",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def parse_technodom() -> Dict[str, List]:\n    driver = webdriver.Chrome()\n    try:\n        parser = TechnodomParser(driver)\n        return parser.parse()\n    finally:\n        driver.quit()\n@app.get(\"/parse/dns\")\ndef parse_dns() -> List[str]:\n    scraper = DNSScraper()",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "parse_dns",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def parse_dns() -> List[str]:\n    scraper = DNSScraper()\n    try:\n        return scraper.parse()\n    finally:\n        scraper.close()\n@app.get(\"/parse/marwin\")\ndef parse_marwin() -> List[str]:\n    scraper = MarwinParser()\n    try:",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "parse_marwin",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def parse_marwin() -> List[str]:\n    scraper = MarwinParser()\n    try:\n        return scraper.parse()\n    finally:\n        scraper.close()\n@app.get(\"/parse/all\")\ndef parse_all() -> Dict[str, List]:\n    technodom_games, dns_games, marwin_games = [], [], []\n    driver = webdriver.Chrome()",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "parse_all",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def parse_all() -> Dict[str, List]:\n    technodom_games, dns_games, marwin_games = [], [], []\n    driver = webdriver.Chrome()\n    try:\n        technodom_parser = TechnodomParser(driver)\n        technodom_games = technodom_parser.parse()\n    finally:\n        driver.quit()\n    dns_scraper = DNSScraper()\n    try:",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def register(user_data: UserCreate, db: Session = Depends(get_db)):\n    new_user = create_user(db, user_data)\n    return {\"email\": new_user.email, \"is_active\": new_user.is_active}\n@router.post(\"/auth/login\")\ndef login(user_data: UserLogin, db: Session = Depends(get_db)):\n    user = db.query(User).filter(User.email == user_data.email).first()\n    print('joiadhjsfdhjewfhjsfkd', user)\n    if not user or not verify_password(user_data.password, user.hashed_password):\n        raise HTTPException(status_code=401, detail=\"Invalid credentials\")\n    access_token = create_access_token(data={\"sub\": user.email})",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def login(user_data: UserLogin, db: Session = Depends(get_db)):\n    user = db.query(User).filter(User.email == user_data.email).first()\n    print('joiadhjsfdhjewfhjsfkd', user)\n    if not user or not verify_password(user_data.password, user.hashed_password):\n        raise HTTPException(status_code=401, detail=\"Invalid credentials\")\n    access_token = create_access_token(data={\"sub\": user.email})\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\nif __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(\"app.main:app\", host=\"0.0.0.0\", port=8000, reload=True, log_level=\"info\")",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI()\nrouter = APIRouter()\nBase.metadata.create_all(bind=engine)\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\napp.include_router(auth_router, prefix=\"/auth\")",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "router = APIRouter()\nBase.metadata.create_all(bind=engine)\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\napp.include_router(auth_router, prefix=\"/auth\")\nBase.metadata.create_all(bind=engine)",
        "detail": "app.main",
        "documentation": {}
    }
]